# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UsersDocument {
  _id: ID!
  userType: String!
  enabled: Boolean!
  email_enabled: Boolean!
  email: String!
  password: String!
  is_registered: Boolean!
  lowercaseUsername: String!
  username: String!
  passwordReset: JSONObject!
  emailReset: JSONObject!
  validateEmail: JSONObject!
  permission: [String!]!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LoginResult {
  user: UsersDocument!
  token: String!
}

type CountryDocument {
  _id: ID!
  Country_name: String!
}

type StateDocument {
  _id: ID!
  State_name: String!
  country: CountryDocument!
}

type CityDocument {
  _id: ID!
  city_name: String!
  state: StateDocument
  country: CountryDocument!
}

type LocationDocument {
  _id: ID!
  latitude: String!
  longitude: String!
  location_name: String!
  address_line_1: String!
  address_line_2: String!
  pin_code: Int!
  city: CityDocument!
}

type CourseDocument {
  _id: ID!
  course_name: String!
  other_name: String!
}

type EducationDocument {
  _id: ID!
  grade: String!
  marks: String!
  marksUnit: String!
  course: CourseDocument!
  additional_qualification: [String!]!
  start_period: DateTime!
  end_period: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LanguageDocument {
  _id: ID!
  name: String!
}

type ImageDocument {
  _id: ID!
  user: UsersDocument!
  image_url: String!
}

type JobCategoryDocument {
  _id: ID!
  category_name: String!
  category_image: ImageDocument!
}

type CandidateProfileDocument {
  _id: ID!
  candidate: CandidateDocument!
  website_link: String!
  educations: [EducationDocument!]!
  languages: [LanguageDocument!]!
  description: String!
  total_year_of_experience: String!
  career_objective: String!
  profile_image: ImageDocument!
  social_network_urls: [JSONObject!]!
  current_job_category: JobCategoryDocument!
}

type CandidateDocument {
  _id: ID!
  first_name: String!
  last_name: String!
  candidate_profile: CandidateProfileDocument!
  location: LocationDocument!
  user: UsersDocument!
  secondary_email: String!
  primary_contact_no: String!
  secondary_contact_no: String!
}

type CompanyDocument {
  _id: ID!
  company_name: String!
  other_name: String!
  social_network_urls: [JSONObject!]!
}

type ExperienceMasterDocument {
  _id: ID!
  lower_limit: String!
  upper_limit: String!
}

type Query {
  users: [UsersDocument!]!
  user(username: String!, email: String!): UsersDocument!
  forgotPassword(email: String!): Boolean!
  changeEmailAddress(email: String!): Boolean!
  login(user: LoginUserInput!): LoginResult!
  refreshToken: LoginResult!
}

input LoginUserInput {
  username: String!
  email: String!
  password: String!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): UsersDocument!
  resetPassword(resetPasswordInput: ResetPasswordInput!): UsersDocument!
  resetEmailAddress(resetEmailInput: ResetEmailInput!): UsersDocument!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input ResetPasswordInput {
  email: String!
  code: String!
  password: String!
}

input ResetEmailInput {
  oldEmail: String!
  newEmail: String!
  code: String!
}